{"version":3,"sources":["LineItem.js","LeaderBoard.js","App.js","reportWebVitals.js","Particles.js","index.js"],"names":["LineItem","winner","Fragment","flipId","username","className","score","LeaderBoard","winners","console","log","flipKey","Object","entries","map","join","winnerItems","app","Realm","id","winnerDiff","oldWinners","newWinners","fromEntries","newWinner","index","change","oldWinner","undefined","previousIndex","previousScore","App","onClick","useState","scores","setScores","useEffect","loginAnonymous","a","logIn","anonymous","user","functions","winnersCollection","mongoClient","db","collection","winnerStream","watch","return","increased","filter","length","rect","document","querySelectorAll","getBoundingClientRect","getElementById","__particles","boom","kaboom","x","left","right","y","top","bottom","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","elementID","emitterConfig","autoPlay","direction","life","count","duration","spawnColor","value","rate","delay","quantity","size","width","height","config","emitters","particles","number","min","max","shape","type","fullScreen","enable","sync","move","gravity","drift","outModes","default","speed","decay","opacity","animation","startValue","Exploder","container","this","canvas","emitter","addEmitter","position","tsParticles","load","element","onclick","e","clientX","clientY","initParticles","ReactDOM","render","StrictMode","dataset"],"mappings":"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","file":"static/js/main.96948e12.chunk.js","sourcesContent":["import React from \"react\";\nimport { Flipped } from 'react-flip-toolkit';\n\nfunction LineItem({ winner, ...rest }) {\n    return <React.Fragment>\n        <Flipped flipId={winner.username}>\n            <div className=\"username line-item\">{winner.username}</div>\n        </Flipped>\n        <Flipped flipId={winner.username + '---score'}>\n            <div className=\"score line-item\">{winner.score}</div>\n        </Flipped>\n    </React.Fragment>\n\n}\n\nexport default LineItem;","import LineItem from \"./LineItem.js\";\nimport \"./LeaderBoard.css\";\nimport { Flipper } from \"react-flip-toolkit\";\nimport React from \"react\";\n\nfunction LeaderBoard({ winners }) {\n  console.log(\"Winners:\", winners);\n  const flipKey = Object.entries(winners)\n    .map(([username, winner]) => username)\n    .join(\"\");\n  const winnerItems = Object.entries(winners).map(([username, winner]) => (\n    <LineItem key={username} winner={{ username, ...winner }} />\n  ));\n\n  return (\n    <div className=\"leaderboard\">\n      <h1>Leaderboard</h1>\n      <Flipper className=\"leaderboard-items\" flipKey={flipKey}>\n        {winnerItems}\n      </Flipper>\n    </div>\n  );\n}\n\nexport default LeaderBoard;\n","import React, { useState, useEffect } from \"react\";\nimport LeaderBoard from \"./LeaderBoard.js\";\nimport \"./App.css\";\n\nimport * as Realm from \"realm-web\";\nconst REALM_APP_ID = \"demogames-sdyhk\";\nconst app = new Realm.App({ id: REALM_APP_ID });\n\nexport function winnerDiff(oldWinners, newWinners) {\n  if (oldWinners === null) {\n    return Object.fromEntries(\n      newWinners.map((newWinner, index) => {\n        const username = newWinner.username;\n        const score = newWinner.score;\n        return [\n          username,\n          {\n            score: score,\n            change: null,\n            index: index,\n          },\n        ];\n      })\n    );\n  } else {\n    return Object.fromEntries(\n      newWinners.map((newWinner, index) => {\n        const username = newWinner.username;\n        const score = newWinner.score;\n        const oldWinner =\n          oldWinners === null || oldWinners[username] === undefined\n            ? { index: null, score: null }\n            : oldWinners[username];\n        const previousIndex = oldWinner.index;\n        const previousScore = oldWinner.score;\n        let change = null; // Player's position and score are unchanged.\n        if (previousIndex === null || index < previousIndex) {\n          change = \"up\"; // Player has moved up at least one space.\n        } else if (index > previousIndex) {\n          change = \"down\"; // Player has been moved down (because someone else moved up)\n        } else if (score > previousScore) {\n          change = \"inc\"; // Player's score has increased, but no position change.\n        }\n        return [\n          username,\n          {\n            score: score,\n            change: change,\n            index: index,\n            previousIndex: previousIndex,\n            previousScore: previousScore,\n          },\n        ];\n      })\n    );\n  }\n}\n\nfunction App({ onClick }) {\n  console.log(\"App render!!!\");\n  const [scores, setScores] = useState([]);\n\n  useEffect(() => {\n    const loginAnonymous = async () => {\n      const user = await app.logIn(Realm.Credentials.anonymous());\n      var winners = winnerDiff(null, await user.functions.winners());\n      setScores(winners);\n\n      const winnersCollection = user\n        .mongoClient(\"mongodb-atlas\")\n        .db(\"demo_games\")\n        .collection(\"scores\");\n      const winnerStream = winnersCollection.watch();\n      for await (const change of winnerStream) {\n        winners = winnerDiff(winners, await user.functions.winners());\n        setScores(winners);\n      }\n\n      return () => {\n        winnerStream.return();\n        console.log(\"Unregister from change stream.\");\n      };\n    };\n    loginAnonymous();\n  }, []);\n\n  useEffect(() => {\n    const boom = () => {\n      const increased = Object.entries(scores).filter(\n        ([username, winner]) =>\n          winner.change === \"up\" || winner.change === \"inc\"\n      );\n      if (increased.length > 0) {\n        const element =\n          document.querySelectorAll(\".score\")[increased[0][1].index];\n        const rect = element.getBoundingClientRect();\n        document.getElementById(\"particles\").__particles.boom.kaboom({\n          x: rect.left + (rect.right - rect.left) / 2,\n          y: rect.top + (rect.bottom - rect.top) / 2,\n        });\n      }\n    };\n    boom();\n  });\n\n  return (\n    <div className=\"App\">\n      <LeaderBoard winners={scores} />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import { tsParticles } from \"tsparticles\";\n\nasync function initParticles(elementID) {\n  const emitterConfig = {\n    autoPlay: true,\n    direction: \"none\",\n    life: {\n      count: 1,\n      duration: 1,\n    },\n    spawnColor: {\n      value: \"#fa0\",\n    },\n    rate: {\n      delay: 30,\n      quantity: 50,\n    },\n    size: {\n      width: 1,\n      height: 1,\n    },\n  };\n\n  const config = {\n    emitters: [],\n\n    particles: {\n      number: {\n        value: 50,\n      },\n      size: {\n        value: { min: 3, max: 7 },\n      },\n      shape: {\n        type: [\"circle\", \"square\"],\n      },\n      fullScreen: {\n        enable: true,\n      },\n      life: {\n        duration: {\n          sync: true,\n          value: 2,\n        },\n        count: 1,\n      },\n      move: {\n        direction: \"none\",\n        enable: true,\n        gravity: {\n          enable: true,\n        },\n        drift: {\n          min: -2,\n          max: 2,\n        },\n        outModes: {\n          default: \"destroy\",\n          top: \"none\",\n        },\n        speed: { min: 10, max: 30 },\n        decay: 0.03,\n      },\n      opacity: {\n        animation: {\n          value: { min: 0, max: 1 },\n          enable: true,\n          speed: 1,\n          startValue: 1,\n          sync: true,\n        },\n      },\n    },\n  };\n\n  class Exploder {\n    constructor(container) {\n      this.container = container;\n      console.log(this.container);\n    }\n    kaboom({ x, y }) {\n      console.log(\"KABOOM\", x, y);\n      console.log(this.container.canvas);\n      const emitter = this.container.addEmitter(emitterConfig);\n      emitter.position = { x: x, y: y };\n      console.log(\"Added emitter:\", emitter, emitter.position);\n    }\n  }\n\n  const container = await tsParticles.load(elementID, config);\n\n  const boom = new Exploder(container);\n\n  const element = document.getElementById(elementID);\n  element.__particles = {\n    container: container,\n    boom: boom,\n  };\n\n  element.onclick = (e) => {\n    console.log(\"kaboom\", { x: e.clientX, y: e.clientY });\n    boom.kaboom({ x: e.clientX, y: e.clientY });\n  };\n}\nexport default initParticles;\n\n/*\n<Particles loaded={particlesLoaded} options={{\n          emitters: {\n            direction: \"none\",\n            position: {\n              x: 50, y: 25,\n            },\n            spawnColor: {\n              value: \"#fa0\",\n              animation: {\n                l: {\n                  enable: true,\n                  offset: {\n                    min: 0,\n                    max: 100\n                  },\n                  speed: 0,\n                  sync: false\n                }\n              }\n            },\n            rate: {\n              delay: 0.2,\n              quantity: 100\n            },\n            size: {\n              width: 30,\n              height: 5\n            }\n          },\n\n          particles: {\n            number: {\n              value: 0\n            },\n            size: {\n              value: { min: 3, max: 7 }\n            },\n            shape: {\n              type: [\"circle\", \"square\"]\n            },\n            fullScreen: {\n              enable: true\n            },\n            life: {\n              duration: {\n                sync: true,\n                value: 2\n              },\n              count: 1\n            },\n            move: {\n              direction: \"none\",\n              enable: true,\n              gravity: {\n                enable: true\n              },\n              drift: {\n                min: -2,\n                max: 2\n              },\n              outModes: {\n                default: \"destroy\",\n                top: \"none\"\n              },\n              speed: { min: 10, max: 30 },\n              decay: 0.03,\n            },\n            opacity: {\n              animation: {\n                value: { min: 0, max: 1 },\n                enable: true,\n                speed: 1,\n                startValue: 1,\n                sync: true,\n              }\n            }\n          }\n        }} />\n        */\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\nimport \"./Particles.css\";\nimport initParticles from \"./Particles.js\";\n\nfunction onClick() {\n  console.log(\"click\");\n  console.log(document.getElementById(\"particles\").dataset.boom);\n  document.getElementById(\"particles\").__particles.boom.kaboom();\n}\n\nReactDOM.render(\n  <React.StrictMode>\n    <App onClick={onClick} />\n    <div id=\"particles\" />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\ninitParticles(\"particles\");\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}